name: Flicks CI
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

env:
  SALT_KEY: ${{ secrets.SALT_KEY }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  HUEY_IMMEDIATE: ${{ secrets.HUEY_IMMEDIATE }}
  CIRCLE_API_KEY: ${{ secrets.CIRCLE_API_KEY }}
  HUEY_REDIS_URL: ${{ secrets.HUEY_REDIS_URL }}
  CIRCLE_API_BASE_URL: ${{ secrets.CIRCLE_API_BASE_URL }}
  DJANGO_SETTINGS_MODULE: ${{ secrets.DJANGO_SETTINGS_MODULE }}
  CIRCLE_MASTER_WALLET_ID: ${{ secrets.CIRCLE_MASTER_WALLET_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
  MAX_FILE_UPLOAD_PER_REQUEST: ${{ secrets.MAX_FILE_UPLOAD_PER_REQUEST }}
  PRESIGNED_URL_EXPIRATION: ${{ secrets.PRESIGNED_URL_EXPIRATION }}
  AGORA_APP_ID: ${{ secrets.AGORA_APP_ID }}
  AGORA_APP_CERTIFICATE: ${{ secrets.AGORA_APP_CERTIFICATE }}

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  #----------------------------------------------
  #      Backend linting job
  #----------------------------------------------
  lint-backend:
    name: Backend Lint
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15.3-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: flicks-api
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:6-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Load cached poetry installation
        id: cached-poetry
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: poetry-0

      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1.3.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction

      - name: Run linters
        run: poetry run make lint

  #----------------------------------------------
  #      Backend testing job
  #----------------------------------------------
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: ["lint-backend"]
    services:
      postgres:
        image: postgres:15.3-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: flicks-api
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:6-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Load cached poetry installation
        id: cached-poetry
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: poetry-0

      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1.3.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction

      - name: Run DB migrations
        run: poetry run python manage.py migrate

      - name: Run tests
        run: poetry run make test
